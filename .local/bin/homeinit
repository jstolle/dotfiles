#!/usr/bin/env sh
## Initialize and update user profile. Largely stolen from https://gitlab.com/ambrevar/dotfiles/blob/master/.local/bin/homeinit

if [ "$1" = "-h" ]; then
    cat <<EOF>&2
Usage: ${0##*/}

Initialize home folder.

Options:

  -u: Skip large updates (packages, etc.)

EOF
    exit
fi

OPT_UPDATE=true
if [ "$1" = "-u" ]; then
    OPT_UPDATE=false
    shift
fi

SOURCEDIR="$HOME/personal"
PROJECTDIR="$HOME/projects"
MYGIT="git@github.com:jstolle"
[ -z "$XDG_CONFIG_HOME" ] && XDG_CONFIG_HOME="$HOME/.config"
[ -z "$XDG_DATA_HOME" ] && XDG_DATA_HOME="$HOME/.local/share"
[ -z "$XDG_CACHE_HOME" ] && XDG_CACHE_HOME="$HOME/.cache"

## ln no-clobber
lnn() {
    if [ -d "$2" ]; then
        set -- "$1" "$2/$(basename "$1")"
    fi
    if [ ! -e "$2" ] || [ -h "$2" ]; then
        ln -svnf "$1" "$2"
    fi
}

echo "==> Initial packages"
if command -v pacman >/dev/null 2>&1; then
    sudo pacman --noconfirm -S --needed gnupg git stow keybase
elif command -v nix-env >/dev/null 2>&1; then
    nix-env --install gnupg git stow keybase
elif command -v brew >/dev/null 2>&1; then
    brew install gnupg git stow
    brew cask install keybase
fi

echo "==> GPG"
if [ -d $XDG_DATA_HOME/gnupg ]; then
    chmod go-rwx $XDG_DATA_HOME/gnupg $XDG_DATA_HOME/gnupg/*
    if [ -e "$SOURCEDIR" ]; then
        git -C "$SOURCEDIR" pull
    else
        git clone "$MYGIT/personal"
    fi
    if [ -e $XDG_DATA_HOME/password-store ]; then
        git -C $XDG_DATA_HOME/password-store pull
    else
        git clone "$MYGIT/password-store" $XDG_DATA_HOME/password-store
        ## The following is necessary to make sure the 'diff' GPG filter is properly set up.
        pass git init
    fi
else
    echo "$XDG_DATA_HOME/gnupg not found."
fi

echo "==> Persistent folders"
for i in .emacs.d .local/share projects temp; do
    mkdir -pv "$HOME/$i"
done

echo "==> dotfiles"
if [ -e ~/dotfiles ]; then
    git -C ~/dotfiles remote set-url origin "$MYGIT/dotfiles"
    git -C ~/dotfiles pull
else
    git clone "$MYGIT/dotfiles"
fi

echo "==> System packages"
if command -v pacman >/dev/null 2>&1; then
    pacman_list=""
    if [ -f $XDG_DATA_HOME/package-lists/arch-official ]; then
        pacman_list="$(cat $XDG_DATA_HOME/package-lists/arch-official)"
    fi
    sudo pacman --noconfirm -S --needed base base-devel $pacman_list
    if ! command -v cower >/dev/null 2>&1; then
        mkdir -p /tmp/cower
        pushd /tmp/cower
        curl https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=cower > PKGBUILD
        makepkg --noconfirm -si
        popd
    fi
    if ! command -v pacaur >/dev/null 2>&1; then
        mkdir -p /tmp
        pushd /tmp
        cower -d pacaur
	cd pacaur
        makepkg --noconfirm -si
        popd
    fi
    if $OPT_UPDATE && [ -f $XDG_DATA_HOME/package-lists/arch-aur ]; then
        pacaur --noconfirm --noedit -y --needed "$(cat $XDG_DATA_HOME/package-lists/arch-aur)"
    fi
    pacman_list=$(pacman -Qdtq)
    if [ -n "$pacman_list" ]; then
        sudo pacman --noconfirm -Rs "$pacman_list"
    fi
elif command -v nix-env >/dev/null 2>&1; then
    nix-env --install --from-profile $XDG_DATA_HOME/package-lists/nix
elif command -v brew >/dev/null 2>&1; then
    for tap in $(cat $XDG_DATA_HOME/package-lists/brew-taps); do
	brew untap $tap 2>/dev/null
	brew tap $tap
    done

    brew update
    brew install $(cat $XDG_DATA_HOME/package-lists/brew-official)
    brew cask install $(cat $XDG_DATA_HOME/package-lists/brew-casks)
fi

echo "==> Bookmarks"
mkdir -pv "$XDG_CONFIG_HOME/qutebrowser/bookmarks"
lnn "$SOURCEDIR/bookmarks/bookmarks" "$XDG_CONFIG_HOME/qutebrowser/bookmarks/urls"
lnn "$SOURCEDIR/bookmarks/quickmarks" "$XDG_CONFIG_HOME/qutebrowser/"

# if ! command -v emacs >/dev/null 2>&1 || \
#          [ $(emacs --quick --batch --eval '(message "%s" emacs-major-version)' 2>&1) -lt 26 ]; then
#     pushd "$HOME/projects"
#     [ -e emacs ] || git clone https://git.savannah.gnu.org/git/emacs.git
#     if command -v guix >/dev/null 2>&1; then
#         guix package --install emacs-dev
#     else
#         mkdir -p ../emacs-build
#         cd ../emacs-build
#         projects/emacs/configure \
#             --disable-gtk-deprecation-warnings \
#             --without-pop \
#             --without-kerberos \
#             --without-kerberos5 \
#             --with-x-toolkit=gtk3 \
#             --with-jpeg \
#             --with-tiff \
#             --with-gif \
#             --with-png \
#             --with-rsvg \
#             --with-xml2 \
#             --with-imagemagick \
#             --with-xft \
#             --with-libotf \
#             --without-gsettings \
#             --without-gconf \
#             --with-gnutls \
#             --with-modules \
#             --with-threads
#         popd
#         sudo make install
#     fi
# fi

if command -v emacs >/dev/null 2>&1; then
    mkdir -pv "$HOME/.cache/emacs/"
    if ! command -v guix >/dev/null 2>&1; then
        if $OPT_UPDATE; then
            echo "==> Emacs ELPA packages"
            yes | emacs --batch -l $XDG_DATA_HOME/emacs.d/init.el --eval '(progn (package-refresh-contents) (package-install-selected-packages))'
        fi
    fi
    echo "==> Emacs extra packages"
    mkdir -pv $XDG_DATA_HOME/local/share/emacs/site-lisp
    for i in $XDG_DATA_HOME/local/share/emacs/site-lisp/*; do
        echo "$i"
        git -C "$i" pull
    done
fi

echo "==> Mail"
lnn "$SOURCEDIR/mail/mbsyncrc" "$HOME/.mbsyncrc"
lnn "$SOURCEDIR/mail/authinfo.gpg" "$HOME/.authinfo.gpg"
mkdir -pv "$HOME/.cache/mail/"
while IFS= read -r i; do
    ## We get a shell command, so we need to evaluate it to expand "~".
    eval "$i"
done <<EOF
$(awk '/^Path/ {$1="mkdir -pv"; print}' $XDG_DATA_HOME/mbsyncrc)
EOF

if $OPT_UPDATE; then
    mbsync -aV
    mu index --maildir=$XDG_DATA_HOME/cache/mail
fi

if [ "${SHELL##*/}" = zsh ]; then
    echo "==> Oh-My-Zsh"
    if [ -e $PROJECTDIR/oh-my-zsh ]; then
        git -C $PROJECTDIR/oh-my-zsh pull
    else
        git clone -C "$PROJECTDIR" "$MYGIT/oh-my-zsh"
    fi

    echo "==> Bullet Train Theme"
    if [ -e $PROJECTDIR/bullet-train.zsh ]; then
        git -C "$PROJECTDIR/bullet-train.zsh" pull
    else
        git -C "$PROJECTDIR" clone "$MYGIT/bullet-train.zsh"
    fi

    lnn "$PROJECTDIR/bullet-train.zsh/bullet-train.zsh-theme" "$HOME/dotfiles/.config/zsh/custom"
fi

echo "==> TMUX"
if [ -e "$PROJECTDIR/tpm" ]; then
    git -C "$PROJECTDIR/tpm" pull
else
    git -C "$PROJECTDIR" clone "$MYGIT/tpm"
fi
lnn "$PROJECTDIR/tpm" ~/dotfiles/.tmux/plugins

pushd ~/dotfiles
stow -v .
popd
