// jstolle's conkerorrc -*- js2 -*-


// passwords and usernames
require("/home/josh/myPasswords.js");


// Page modes
require("page-modes/duckduckgo.js");
require("page-modes/github.js");
require("page-modes/gmail.js");
require("page-modes/gmane.js");
require("page-modes/google-calendar.js");
require("page-modes/google-gqueues.js");
require("page-modes/google-images.js");
require("page-modes/google-maps.js");
require("page-modes/google-reader.js");
require("page-modes/google-video.js");
require("page-modes/reddit.js");
require("page-modes/stackexchange.js");
require("page-modes/twitter.js");
require("page-modes/wikipedia.js");
require("page-modes/xkcd.js");
require("page-modes/youtube-player.js");
require("page-modes/youtube.js");


// webjumps
define_webjump("gmail", "https://mail.google.com"); // gmail inbox
define_webjump("greader", "http://www.google.com/reader/"); // Google Reader
define_webjump("twitter", "http://twitter.com/#!/search/%s", $alternative = "https://twitter.com/");  // twitter
define_webjump("w3schools", "http://www.w3schools.com"); // w3schools site
define_webjump("w3search", "http://www.google.com/search?sitesearch=www.w3schools.com&as_q=%s"); // w3schools search
define_webjump("jquery", "http://docs.jquery.com/Special:Search?ns0=1&search=%s"); // jquery
define_webjump("archwiki", "https://wiki.archlinux.org/index.php?search=%s"); // arch wiki
define_webjump("stackoverflow", "http://stackoverflow.com/search?q=%s", $alternative = "http://stackoverflow.com/"); // stackoverflow
define_webjump("stats", "http://stats.stackexchange.com/search?q=%s"); // stats
define_webjump("imdb", "http://www.imdb.com/find?s=all;q=%s"); // imdb
define_webjump("duckgo", "https://duckduckgo.com/?q=%s", $alternative = "http://duckduckgo.com"); // duckduckgo
define_webjump("blekko", "http://blekko.com/ws/%s", $alternative = "http://blekko.com/"); // blekko
define_webjump("youtube", "http://www.youtube.com/results?search_query=%s&aq=f", $alternative = "http://www.youtube.com"); // youtube
define_webjump("duckgossl", "https://duckduckgo.com/?q=%s"); // duckduckgo SSL
define_webjump("urbandictionary", "http://www.urbandictionary.com/define.php?term=%s"); // urban dictionary
define_webjump("facebook", "http://www.facebook.com");      // facebook homepage
define_webjump("pinboard", function (url) {
    if (url) {
        return "http://pinboard.in/add?next=same&url=" + url;
    } else {
        return "javascript:document.location.href='http://pinboard.in/add?next=same&url='+encodeURIComponent(document.location.href)+'&description='+encodeURIComponent(document.getSelection())+'&title='+encodeURIComponent(document.title);";
   }
}, $argument = "optional");


// the default page for new buffers.
homepage = "about:blank";


// load urls from the command line in new buffers instead
// of new windows.
url_remoting_fn = load_url_in_new_buffer;


// load download buffers in the background in the current
// window, instead of in new windows.
download_buffer_automatic_open_target = OPEN_NEW_BUFFER_BACKGROUND;


// display properties of the current selected node during
// the hints interaction.
hints_display_url_panel = true;


// default directory for downloads and shell commands.
cwd = get_home_directory();
cwd.append("Downloads");


// automatically handle some mime types internally.
content_handlers.set("application/pdf", content_handler_save);


// let xkcd-mode put the funny alt text into the page.
xkcd_add_title = true;

// sessions
require("session.js");
session_auto_save_auto_load = true;

// keys
define_key(content_buffer_normal_keymap, "M-left", "back");
define_key(content_buffer_normal_keymap, "M-right", "forward");


// Don't let kill-buffer close the window
can_kill_last_buffer = false;


// from Phil
// -*- Mode: espresso -*-

interactive("fill-domain", "Fill the minibuffer with the current domain.",
            function (I) {
              var field = I.minibuffer.input_element;
              var paths = String(I.window.content.location).split('/');
var domain = paths[0] + "/" + paths[1] + "/" + paths[2] + "/";
field.value = domain;
            });

define_key(minibuffer_keymap, "C-/", "fill-domain");

interactive("tinyurl", "Create a TinyURL for the current URL",
            function(I) {
              I.window.content.location.href = 'http://tinyurl.com/create.php?url=' +
                encodeURIComponent(I.window.content.location.href);
});


key_bindings_ignore_capslock = true;
url_remoting_fn = load_url_in_new_buffer;
url_completion_use_history = true;
url_completion_use_bookmarks = false;
can_kill_last_buffer = false;
download_buffer_automatic_open_target = OPEN_NEW_BUFFER_BACKGROUND;

register_user_stylesheet(
  "data:text/css,"+
    escape("#minibuffer, tree.completions, .mode-line { font-family: Inconsolata; font-size: 9pt; }"));

register_user_stylesheet(
    "data:text/css," +
        escape (".topsearch input { width: 2em; };"));

interactive("toggle-stylesheets",
            "Toggle whether conkeror uses style sheets (CSS) for the " +
            "current buffer. It is sometimes useful to turn off style " +
            "sheets when the web site makes obnoxious choices.",
            function(I) {
              var s = I.buffer.document.styleSheets;
              for (var i = 0; i < s.length; i++)
                s[i].disabled = !s[i].disabled;
            });

require("page-modes/google-search-results.js");
auto_mode_list.push([build_url_regex($domain = /google\.com/),
                     google_search_results_mode]);

user_pref('extensions.mozrepl.autoStart', true);

interactive("readability_arc90",
            "Readability is a simple tool that makes reading on the web more enjoyable by removing the clutter around what you are reading",
            function readability_arc90(I) {
                var document = I.window.buffers.current.document;

                var readConvertLinksToFootnotes = false;
                var readStyle = 'style-newspaper';
                var readSize = 'size-medium';
                var readMargin = 'margin-wide';

                var _readability_readStyle = document.createElement('SCRIPT');
                _readability_readStyle.text = 'var readStyle = \'' + readStyle + '\';';
                document.getElementsByTagName('head')[0].appendChild(_readability_readStyle);

                var _readability_readSize = document.createElement('SCRIPT');
                _readability_readSize.text = 'var readSize = \'' + readSize + '\';';
                document.getElementsByTagName('head')[0].appendChild(_readability_readSize);

                var _readability_readMargin = document.createElement('SCRIPT');
                _readability_readMargin.text = 'var readMargin = \'' + readMargin + '\';';
                document.getElementsByTagName('head')[0].appendChild(_readability_readMargin);

                var _readability_readConvertLinksToFootnotes = document.createElement('SCRIPT');
                _readability_readConvertLinksToFootnotes.text = 'var readConvertLinksToFootnotes = ' + readConvertLinksToFootnotes + ';';
                document.getElementsByTagName('head')[0].appendChild(_readability_readConvertLinksToFootnotes);

                var _readability_script = document.createElement('script');
                _readability_script.type='text/javascript';
                _readability_script.src='http://lab.arc90.com/experiments/readability/js/readability.js?x='+(Math.random());
                document.documentElement.appendChild(_readability_script);

                var _readability_css = document.createElement('link');
                _readability_css.rel = 'stylesheet';
                _readability_css.href = 'http://lab.arc90.com/experiments/readability/css/readability.css';
                _readability_css.type = 'text/css';
                _readability_css.media = 'all';
                document.documentElement.appendChild(_readability_css);

                var _readability_print_css = document.createElement('link');
                _readability_print_css.rel = 'stylesheet';
                _readability_print_css.href = 'http://lab.arc90.com/experiments/readability/css/readability-print.css';
                _readability_print_css.media = 'print';
                _readability_print_css.type = 'text/css';
                document.getElementsByTagName('head')[0].appendChild(_readability_print_css);
            });

define_key(content_buffer_normal_keymap, "z", "readability_arc90");

if ('@hyperstruct.net/mozlab/mozrepl;1' in Cc) {
  var mozrepl = Cc['@hyperstruct.net/mozlab/mozrepl;1']
    .getService(Ci.nsIMozRepl);
  if (! mozrepl.isActive())
    mozrepl.start(4242);
}

// load session module
require("session.js");
session_auto_save_auto_load = true; // auto-load session

// don't open download buffer automatically
remove_hook("download_added_hook", open_download_buffer_automatically);

// don't show clock
remove_hook("mode_line_hook", mode_line_adder(clock_widget));

// add favicons
require("favicon");
add_hook("mode_line_hook", mode_line_adder(buffer_icon_widget), true);
read_buffer_show_icons = true;

/// qrcode

interactive("qrcode", "Open QR code of current URL.",
            function qrcode(I) {
                I.window.content.location = 'http://chart.apis.google.com/chart?cht=qr&chs=300x300&chl=' +
                    encodeURIComponent(I.window.content.location.href);
            });

define_key(content_buffer_normal_keymap, "Z", "qrcode");

// cookies

require("cookie.js"); // hopefully this would go in modules/cookie.js so this would not be needed

function for_each_host_cookie(host, fn) {
    var cookies = cookie_manager.getCookiesFromHost(host);
    while (cookies.hasMoreElements()) {
        var cookie = cookies.getNext().QueryInterface(Components.interfaces.nsICookie2);
        fn(cookie);
    }
}

function clear_host_cookies(host) {
    for_each_host_cookie(host,
                         function (cookie) {
                             cookie_manager.remove(cookie.host, cookie.name,
                                                   cookie.path, false);
                         });
}

interactive("clear-site-cookies", "Delete all cookies for the current site",
            function (I) {
                var host = I.buffer.current_uri.host;
                clear_host_cookies(host);
                I.minibuffer.message("Cookies cleared for " + host);
            });

var user_agents = { "conkeror": "Mozilla/5.0 (X11; Linux x86_64; rv:8.0.1) " +
                    "Gecko/20100101 conkeror/1.0pre",
                  "chromium": "Mozilla/5.0 (X11; U; Linux x86_64; en-US) " +
                    "AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.472.63" +
                    " Safari/534.3",
                  "firefox": "Mozilla/5.0 (X11; Linux x86_64; rv:8.0.1) " +
                  "Gecko/20100101 Firefox/8.0.1",
                  "android": "Mozilla/5.0 (Linux; U; Android 2.2; en-us; " +
                  "Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like " +
                  "Gecko) Version/4.0 Mobile Safari/533.1"};

var agent_completer = prefix_completer($completions = Object.keys(user_agents));

interactive("user-agent", "Pick a user agent from the list of presets",
            function(I) {
                var ua = (yield I.window.minibuffer.read(
                    $prompt = "Agent:",
                    $completer = agent_completer));
                set_user_agent(user_agents[ua]);
            });

var history = Components.classes["@mozilla.org/browser/nav-history-service;1"]
    .getService(Components.interfaces.nsIBrowserHistory);

define_variable("firebug_url",
    "http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js");

function firebug (I) {
    var doc = I.buffer.document;
    var script = doc.createElement('script');
    script.setAttribute('type', 'text/javascript');
    script.setAttribute('src', firebug_url);
    script.setAttribute('onload', 'firebug.init();');
    doc.body.appendChild(script);
}
interactive("firebug", "open firebug lite", firebug);


// RSS subscription
function subscribe_feed(I){
    var f=false;
    var reader = 'http://google.com/reader/view/feed/';
    var document= I.buffer.document;
    var ls=document.getElementsByTagName("link");
    for(var i=0,l;l=ls[i];i++){
        var t=l.getAttribute('type');
        var r=l.getAttribute('rel');
        if(t&&(t=='application/rss+xml'||t=='application/atom+xml')&&r&&r=='alternate'){
            var h= l.getAttribute('href');
            if(h.indexOf('http')!=0){
                var p=(h.indexOf('/')!=0)?'/':document.location.pathname;
                h='http://'+document.location.hostname+p+h;
            }
            document.location=reader+h;
            f=true;
        }}
    if(!f) I.minibuffer.message('Oops. Can\'t find a feed.');
};
function subscribe_feed_all(I){
    var document=I.buffer.document;
    var reader = 'http://google.com/reader/view/feed/';
    var el=document.createElement('div');
    el.style.zIndex=10000;
    el.style.position='absolute';
    el.style.padding='2em';
    el.style.top=0;
    el.style.backgroundColor='#ffffcc';
    el.style.border='1px solid #008000';
    el.style.color='#000 !important';
    el.style.fontFamily='Arial, sans-serif';
    el.style.textAlign='left';
    el.innerHTML='View the following feeds in Google Reader:';
    var found = false;
    var links = document.getElementsByTagName('link');
    for (var i = 0, link;link = links[i];i++) {
        var type = link.getAttribute('type');
        var rel = link.getAttribute('rel');
        var title = link.getAttribute('title');
        if (type && (type == 'application/rss+xml' || type == 'application/atom+xml') && rel && rel == 'alternate'){
            var href = link.getAttribute('href');
            if (!href.match(/^http/)){
                var path = (href.match(/^\//)) ? '/' : document.location.pathname;
                href='http://' + document.location.hostname + path + href;
            }
            var previewLink = document.createElement('a');
            previewLink.href = reader + href;
            previewLink.innerHTML = ((title) ? title : '') + ' - ' + href;
            previewLink.style.display='block';
            previewLink.style.color='#00c';
            previewLink.style.textDecoration='underline';
            el.appendChild(previewLink);
            found = true;
        }}
    var close=document.createElement('a');
    close.innerHTML='hhh Hide this box hhh';
    close.href='#';
    close.style.display='block';
    close.style.marginTop='2em';
    close.style.color='#00c';
    close.style.textDecoration='underline';
    close.addEventListener('click',function() {
                                   el.style.display='none';
                                   return false;
                               }, true);
    el.appendChild(close);
    function AddFeedBox() {
        document.body.insertBefore(el, document.body.firstChild);
        el.scrollIntoView();
    }
    if (!found) I.minibuffer.message('Oops. Can\'t find any feeds for this page.');
    else AddFeedBox();
};
interactive("subscribe-feed", "C-u Subscribes to first encountered feed."
            + "C-u C-u Pops-up a box with all available feeds on the page."
            + "It is oriented towards google-reader but could potentially be adapted to other sites by changing the 'reader' var.",
            alternates(subscribe_feed, subscribe_feed_all)
);

define_key(default_global_keymap, "C-c s", "subscribe-feed");


// Instapaper
interactive("instapaper", "Send the current page to InstaPaper.",
            function (I) {
                check_buffer(I.buffer, content_buffer);
                let posturl = 'https://www.instapaper.com/api/add?' +
                    'username=' + instapaper_username +
                    '&password=' + instapaper_password +
                    '&url=' +
                    encodeURIComponent(I.window.content.location.href) +
                    '&selection=' +
                    encodeURIComponent(
                        yield I.minibuffer.read(
                            $prompt = "Description (optional): "));
                try {
            var content = yield send_http_request(load_spec({uri: posturl}));
            if (content.responseText == "201") {
               I.window.minibuffer.message("InstaPaper ok!");
            } else {
               I.window.minibuffer.message("Error.");
            }
                } catch (e) {
                    I.window.minibuffer.message("Error.");
        }
        });

interactive("instapaper-link", "Send the current link to InstaPaper.",
            function (I) {
              bo = yield read_browser_object(I) ;
              mylink = load_spec_uri_string(load_spec(encodeURIComponent(bo)));
              check_buffer(I.buffer, content_buffer);
              let posturl = 'https://www.instapaper.com/api/add?' +
                            'username=' + instapaper_username +
                            '&password=' + instapaper_password +
                            '&url=' + mylink +
                '&title=' + encodeURIComponent(
                                  yield I.minibuffer.read(
                                  $prompt = "Title (optional): ",
                  $initial_value = bo.textContent)) +
                            '&selection=' + encodeURIComponent(
                                  yield I.minibuffer.read(
                                  $prompt = "Description (optional): ",
                  $initial_value = "From: "+ I.buffer.title +" ("+I.window.content.location.href+")"
));
                try {
            var content = yield send_http_request(load_spec({uri: posturl}));
            if (content.responseText == "201") {
               I.window.minibuffer.message("InstaPaper ok!");
            } else {
               I.window.minibuffer.message("Error.");
            }
                } catch (e) {
                    I.window.minibuffer.message("Error.");
        }
            }, $browser_object = browser_object_links);

define_key(default_global_keymap, "C-x i", "instapaper");
define_key(default_global_keymap, "C-x I", "instapaper-link");
